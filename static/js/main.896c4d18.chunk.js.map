{"version":3,"sources":["reducers/magazine.js","reducers/index.js","actions/magazineActions.js","store/configureStore.js","components/Header.js","components/GoodsItem.js","components/Goods.js","components/CartItem.js","components/Cart.js","App.js","index.js"],"names":["initialState","goods","id","title","description","price","cartGoods","rootReducer","combineReducers","magazine","state","action","type","choosenItem","find","item","payload","choosenItemPrice","itemInCart","findIndex","undefined","console","log","copyArr","slice","map","concat","newArr","obj","targetItem","filteredArray","filter","changedArray","newArrWithoutDeletedElem","emptyArray","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Header","className","Component","GoodsItem","this","props","addToCart","key","onClick","connect","dispatch","Goods","CartItem","deleteFromCart","deleteOrDecreaseItemFromCart","increaseItemInCart","Cart","reduce","acc","length","getTotal","deleteAllItemsFromCart","App","class","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.896c4d18.chunk.js","sourcesContent":["//                                                                   Редюсер\n\n// Импортируем ЭКШЕНЫ\nimport {ADD_TO_CART} from \"../actions/magazineActions\"\n\nimport {DELETE_FROM_CART} from \"../actions/magazineActions\"\n\nimport {DELETE_ALL_ITEMS_FROM_CART} from \"../actions/magazineActions\"\n\nimport {DELETE_OR_DECREASE_ITEM_FROM_CART} from \"../actions/magazineActions\"\n\nimport {INCREASE_ITEM_FROM_CART} from \"../actions/magazineActions\"\n\n\n\n\n\n\n\n\n\n\n// Наш изначальный стейт\nconst initialState = {\n\n  // Все действия с товарами будут находиться в одном редюсере \n\n  // СЛЕВА Список всех имеющихся в магазине  товаров  \n  goods: [\n      {\n          id: 0,\n          title: \"Logitech C920 Hd Pro Webcam\",\n          description: \"Full HD 1080p video that's faster, smoother and works on more computers. Skype in Full HD 1080p Get breathtaking Full HD 1080p video calls on Skype for the sharpest video-calling experience. Smoother. Sharper. Richer. Clearer. Logitech Fluid Crystal Technology. It's what makes a Logitech webcam better.\",\n          price: 120\n      },\n      {\n          id: 1,\n          title: \"Logitech USB Headset H390 with Noise Cancelling Mic\",\n          description: \"Padded headband and ear pads. Frequency response (Microphone): 100 hertz - 10 kilohertz Rotating, noise canceling microphone. Sensitivity (headphone) 94 dBV/Pa +/ 3 dB. Sensitivity (microphone) 17 dBV/Pa +/ 4 dB\",\n          price: 50\n      },\n      {\n          id: 2,\n          title: \"Anker PowerCore 10000 Portable Charger\",\n          description: \"One of The Smallest and Lightest 10000mAh Power Bank, Ultra-Compact Battery Pack, High-Speed Charging Technology Phone Charger for iPhone, Samsung and More.\",\n          price: 150\n      }\n  ],\n\n  // СПРАВА Список всех  товаров, ДОБАВЛЕННЫХ нами в КОРЗИНУ.   По умолчанию - он пустой\n  cartGoods: []\n\n}\n\n\n\n// РЕДЮСЕР \nexport function magazineReducer(state = initialState, action) {\n  switch (action.type) {\n\n    case ADD_TO_CART:\n\n      // Теперь по переданному id ищем в массиве  со всеми имеющимися товарами         товар (объект товара), который хотим добавить в корзину\n      let choosenItem = state.goods.find( item => item.id == action.payload )\n\n      // Цена выбранного товара\n      let choosenItemPrice = choosenItem.price\n\n\n      // Теперь в массиве  goods (корзина)    ищем товар с этим же id. Если мы находим, то УВЕЛИЧИВАЕМ значение цены \n      let itemInCart = state.cartGoods.find( item => item.id == action.payload )\n\n      let indexItemInCart = state.cartGoods.findIndex( item => item.id == action.payload )\n\n\n      // Если в корзине УЖЕ БЫЛ такой товар, тогда мы просто УВЕЛИЧИВАЕМ его сумму\n      if(itemInCart !== undefined) {\n\n        console.log(choosenItem)\n\n        // Копия массива, содержащего товары в корзине\n        let copyArr = state.cartGoods.slice()\n\n        copyArr = copyArr.map( item => {\n          \n          if(item.id != action.payload) {\n            return {\n              ...item,\n              choosenItemPrice: choosenItemPrice\n            }\n          }\n\n          else {\n            return {\n              ...item,\n              choosenItemPrice: choosenItemPrice,\n              price: item.price + choosenItemPrice\n            }\n          }\n\n        } )\n        \n\n        return { ...state,  cartGoods: copyArr }\n      }\n\n      choosenItem.choosenItemPrice = choosenItemPrice\n\n      // Если этот товар добавляем ВПЕРВЫЕ, то\n      return { ...state, choosenItemPrice: choosenItemPrice, cartGoods: state.cartGoods.concat(choosenItem) }\n\n    \n\n\n\n\n    // Экшен, который при клике на \"+\"  увеличивает количество товара в корзине \n    case INCREASE_ITEM_FROM_CART:\n\n      // Ищем по id нужный нам товар и увеличиваем его совокупную стоимость price   на значение choosenItemPrice (стоимость 1 товара)\n      let newArr = state.cartGoods.map( obj => {\n\n        if(obj.id == action.payload) {\n\n          return {\n\n            ...obj, \n            price: obj.price + obj.choosenItemPrice\n\n          }\n\n        }\n\n        else {\n          return obj\n        }\n\n      } )\n\n      return { ...state, cartGoods: newArr }\n\n\n\n\n\n\n\n\n    // Экшен, который   при клике   на \"-\"    уменьшает количество товара или удаляет товар вовсе (если он был в одном экземпляре)\n    case DELETE_OR_DECREASE_ITEM_FROM_CART:\n\n      // Если ОБЩАЯ стоимость товара (price) равнялась цене ОДНОГО товара (choosenItemPrice), значит, у нас всего один товар. Значит, удаляем его\n      // Ищем товар по id.  В targetItem будет желаемый объект\n      let targetItem = state.cartGoods.find( item => {\n\n        return item.id == action.payload\n\n      } )\n\n      // Проверяем - совпадают ли в этом объекте значения свойств price и choosenItemPrice. Если да, то полностью удаляем товар из корзины\n      if(targetItem.price == targetItem.choosenItemPrice ) {\n        // alert(\"Удаляем товар из корзины, так как он всего один\")\n\n\n        // Новый массив уже БЕЗ удалённого элемента \n        let filteredArray = state.cartGoods.filter( obj => {\n          return obj.id !== action.payload\n        } )\n\n        return { ...state, cartGoods: filteredArray }\n      }\n\n\n      // В противном же случае мы должны уменьшить значение price  на единицу стоимости одного товара --> то есть на единицу choosenItemPrice\n      targetItem.price = targetItem.price - targetItem.choosenItemPrice\n\n      // Переберём массив cartGoods , по id найдём объект и поменяем его на targetItem\n      let changedArray = state.cartGoods.map( obj => {\n\n        if(obj.id == action.payload) {\n\n          return {\n            ...obj,\n            ...targetItem\n          }\n\n        } \n\n        else {\n          return obj\n        }\n\n      } )\n      \n\n      return { ...state, cartGoods: changedArray }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // Когда мы нажимаем на \"Х\", желая удалить полностью какой-то конкретный товар\n    case DELETE_FROM_CART:\n      // Новый массив уже БЕЗ удалённого элемента \n      let newArrWithoutDeletedElem = state.cartGoods.filter( obj => {\n        return obj.id !== action.payload\n      } )\n\n      return { ...state, cartGoods: newArrWithoutDeletedElem }\n\n\n\n\n\n\n\n\n\n    // Если хотим удалить вообще ВСЕ товары из корзины\n    case DELETE_ALL_ITEMS_FROM_CART:\n      // Новый массив - полностью пустой\n      let emptyArray = []\n\n      return { ...state, cartGoods: emptyArray }\n  \n\n    default:\n      return state\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // РЕДЮСЕР \n// export function magazineReducer(state = initialState, action) {\n//   switch (action.type) {\n\n//     case ADD_TO_CART:\n\n//       // Делаем копию массива со всеми имеющимися товарами\n//       let newGoods = state.goods.slice()\n\n\n//       // Теперь по переданному id ищем в этом массиве товар (объект товара), который хотим добавить в корзину\n//       let choosenItem = newGoods.find( item => item.id == action.payload )\n\n//       // Цена выбранного товара\n//       let choosenItemPrice = choosenItem.price\n\n\n//       // Теперь в массиве  goods (корзина)    ищем товар с этим же id. Если мы находим, то УВЕЛИЧИВАЕМ значение цены \n//       let itemInCart = state.cartGoods.find( item => item.id == action.payload )\n\n//       let indexItemInCart = state.cartGoods.findIndex( item => item.id == action.payload )\n\n\n//       // Если в корзине уже был такой товар, тогда мы УВЕЛИЧИВАЕМ сумму\n//       if(itemInCart !== undefined) {\n\n//         console.log(\"Такой товар уже есть в корзине. Увеличиваем цену, учитывая добавленный товар\")\n\n\n//         // Копия массива, содержащего товары в корзине\n//         let copyArr = state.cartGoods.slice()\n\n//         copyArr[indexItemInCart].price = copyArr[indexItemInCart].price + choosenItemPrice\n\n//         return { ...state,  cartGoods: copyArr }\n//       }\n\n\n//       // Если этот товар добавляем ВПЕРВЫЕ, то\n//       return { ...state, cartGoods: state.cartGoods.concat(choosenItem) }\n\n\n//     default:\n//       return state\n//   }\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // Импортируем ЭКШЕНЫ\n// import {ADD_TO_CART} from \"../actions/magazineActions\"\n\n\n// // Наш изначальный стейт\n// const initialState = {\n\n//   // СЛЕВА Список всех имеющихся в магазине  товаров  \n//   goods: [\n//       {\n//           id: 0,\n//           title: \"Logitech C920 Hd Pro Webcam\",\n//           description: \"Full HD 1080p video that's faster, smoother and works on more computers. Skype in Full HD 1080p Get breathtaking Full HD 1080p video calls on Skype for the sharpest video-calling experience. Smoother. Sharper. Richer. Clearer. Logitech Fluid Crystal Technology. It's what makes a Logitech webcam better.\",\n//           price: 120\n//       },\n//       {\n//           id: 1,\n//           title: \"Logitech USB Headset H390 with Noise Cancelling Mic\",\n//           description: \"Padded headband and ear pads. Frequency response (Microphone): 100 hertz - 10 kilohertz Rotating, noise canceling microphone. Sensitivity (headphone) 94 dBV/Pa +/ 3 dB. Sensitivity (microphone) 17 dBV/Pa +/ 4 dB\",\n//           price: 50\n//       },\n//       {\n//           id: 2,\n//           title: \"Anker PowerCore 10000 Portable Charger\",\n//           description: \"One of The Smallest and Lightest 10000mAh Power Bank, Ultra-Compact Battery Pack, High-Speed Charging Technology Phone Charger for iPhone, Samsung and More.\",\n//           price: 150\n//       }\n//   ],\n\n//   // СПРАВА Список всех  товаров, ДОБАВЛЕННЫХ нами в КОРЗИНУ.   По умолчанию - он пустой\n//   cartGoods: []\n\n// }\n\n\n\n// // РЕДЮСЕР \n// export function magazineReducer(state = initialState, action) {\n//   switch (action.type) {\n\n//     case ADD_TO_CART:\n\n//       // Делаем копию массива со всеми имеющимися товарами\n//       let newGoods = state.goods.slice()\n\n//       // Теперь по переданному id ищем в этом массиве товар (объект товара), который хотим добавить в корзину\n//       let choosenItem = newGoods.find( item => item.id == action.payload )\n\n//       return { ...state, cartGoods: state.cartGoods.concat(choosenItem) }\n\n\n//     default:\n//       return state\n//   }\n// }\n","import { combineReducers } from 'redux'\nimport { magazineReducer } from './magazine'\n\n\nexport const rootReducer = combineReducers({\n  magazine: magazineReducer\n})\n","// Экшен, добавляющий товар в корзину\nexport const ADD_TO_CART = 'ADD_TO_CART'\n\nexport function addToCart(id) {\n\n  return {\n    type: ADD_TO_CART,\n    payload: id,\n  }\n\n}\n\n\n\n\n// Экшен, который УДАЛЯЕТ конкретный товар из корзины\nexport const DELETE_FROM_CART = 'DELETE_FROM_CART'\n\nexport function deleteFromCart(id) {\n\n  return {\n    type: DELETE_FROM_CART,\n    payload: id,\n  }\n\n}\n\n\n\n\n\n// Экшен, который   УДАЛЯЕТ  ВСЕ   ТОВАРЫ   из корзины\nexport const DELETE_ALL_ITEMS_FROM_CART = 'DELETE_ALL_ITEMS_FROM_CART'\n\nexport function deleteAllItemsFromCart() {\n\n  return {\n    type: DELETE_ALL_ITEMS_FROM_CART\n  }\n\n}\n\n\n\n// Экшен, который   при клике   на \"-\"    уменьшает количество товара или удаляет товар вовсе (если он в одном экземпляре)\nexport const DELETE_OR_DECREASE_ITEM_FROM_CART = 'DELETE_OR_DECREASE_ITEM_FROM_CART'\n\nexport function deleteOrDecreaseItemFromCart(id) {\n\n  return {\n    type: DELETE_OR_DECREASE_ITEM_FROM_CART,\n    payload: id\n  }\n\n}\n\n\n\n\n// Экшен, который   при клике   на \"+\"    увеличивает  количество конкретного  товара в корзине \nexport const INCREASE_ITEM_FROM_CART = 'INCREASE_ITEM_FROM_CART'\n\nexport function increaseItemInCart(id) {\n\n  return {\n    type: INCREASE_ITEM_FROM_CART,\n    payload: id\n  }\n\n}\n\n","import { createStore } from 'redux'\nimport { rootReducer } from '../reducers'\n\n// Создаём стор на основе корневого редюсера \nexport const store = createStore(rootReducer ,  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() )\n\n\n","import React, { Component } from \"react\";\nimport \"../styles.css\";\n\n\nclass Header extends Component {\n  render() {\n    return (\n      <h1 className=\"header\">\n        Electronics E-shop on React-Redux\n      </h1>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"../styles.css\";\n\n// 0 ) Подключаем   встроенную в Redux  функцию connect, которая позволит нам присоединяться к store и   брать  оттуда нужную часть информации\nimport { connect } from 'react-redux'\n\n// 1 ) Подключаем экшены (экшен-криейтор getPhotos)       \nimport { addToCart } from '../actions/magazineActions'\n\n\n\n\n// Карточка товара в СПИСКЕ ВСЕХ ДОСТУПНЫХ ТОВАРОВ (список слева)\nclass GoodsItem extends Component {\n  render() {\n    const { title, description, price, id, addToCart } = this.props;\n\n    return (\n      <div className=\"goods-item\" key={id}>\n        <h3 className=\"goods-item__title\">{title}</h3>\n        <p className=\"goods-item__price\">\n          <span className=\"goods-item__price-value goods-item__price-value_old\">{price*1.2}.00$ </span>\n          <span className=\"goods-item__price-value goods-item__price-value_new\">{price}.00$</span>\n        </p>\n        <p className=\"goods-item__description\">{description}</p>\n        \n        <button onClick={()=> addToCart(id)} className=\"goods-item__add-to-card\">Add to cart</button>\n      </div>\n    );\n  }\n}\n\n\n\n\n// ...а этот метод нужен для того, чтобы взять экшен-креатор     getPhotos     и передать его  через пропсы   КОНТЕЙНЕРУ PageContainer\nconst mapDispatchToProps = dispatch => {\n  return {\n    addToCart: id => dispatch(addToCart(id)),\n  }\n}\n\n\n\n\n// Контейнер PageContainer присоединяется к store  при помощи connect, берёт оттуда нужные данные и прокидывает их КОНТЕЙНЕРУ PageContainerge через props\n//  (при помощи mapStateToPropsи mapDispatchToProps)\nexport default connect(\n  null, mapDispatchToProps\n)(GoodsItem)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from \"react\";\n// import \"../styles.css\";\n\n// // Карточка товара в СПИСКЕ ВСЕХ ДОСТУПНЫХ ТОВАРОВ (список слева)\n// class GoodsItem extends Component {\n//   render() {\n//     const { title, description, price, id } = this.props;\n\n//     return (\n//       <div className=\"goods-item\" key={id}>\n//         <h3 className=\"goods-item__title\">{title}</h3>\n//         <p className=\"goods-item__price\">\n//           <span className=\"goods-item__price-value goods-item__price-value_old\">{price*1.2}.00$ </span>\n//           <span className=\"goods-item__price-value goods-item__price-value_new\">{price}.00$</span>\n//         </p>\n//         <p className=\"goods-item__description\">{description}</p>\n        \n//         <button className=\"goods-item__add-to-card\">Add to cart</button>\n//       </div>\n//     );\n//   }\n// }\n\n// export default GoodsItem;\n","import React, { Component } from \"react\";\nimport \"../styles.css\";\n\nimport GoodsItem from './GoodsItem';\n\nclass Goods extends Component {\n  state = {\n    goods: [\n      {\n          id: 0,\n          title: \"Logitech C920 Hd Pro Webcam\",\n          description: \"Full HD 1080p video that's faster, smoother and works on more computers. Skype in Full HD 1080p Get breathtaking Full HD 1080p video calls on Skype for the sharpest video-calling experience. Smoother. Sharper. Richer. Clearer. Logitech Fluid Crystal Technology. It's what makes a Logitech webcam better.\",\n          price: 120\n      },\n      {\n          id: 1,\n          title: \"Logitech USB Headset H390 with Noise Cancelling Mic\",\n          description: \"Padded headband and ear pads. Frequency response (Microphone): 100 hertz - 10 kilohertz Rotating, noise canceling microphone. Sensitivity (headphone) 94 dBV/Pa +/ 3 dB. Sensitivity (microphone) 17 dBV/Pa +/ 4 dB\",\n          price: 50\n      },\n      {\n          id: 2,\n          title: \"Anker PowerCore 10000 Portable Charger\",\n          description: \"One of The Smallest and Lightest 10000mAh Power Bank, Ultra-Compact Battery Pack, High-Speed Charging Technology Phone Charger for iPhone, Samsung and More.\",\n          price: 150\n      }\n  ]\n  }\n  render() {\n    return (\n      <div className=\"goods\">\n        <h2 className=\"goods__title\">Video Games</h2>\n        {this.state.goods.map(item => (\n          <ul className=\"goods__list\">\n            <li className=\"goods__list-item\" key={item.id}>\n              <GoodsItem {...item} />\n            </li>\n          </ul>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Goods;","import React, { Component } from \"react\";\nimport \"../styles.css\";\n\n// 0 ) Подключаем   встроенную в Redux  функцию connect, которая позволит нам присоединяться к store и   брать  оттуда нужную часть информации\nimport { connect } from 'react-redux'\n\n// 1 ) Подключаем  экшен-криейторы deleteFromCart,     удаляющий конкретный   товар из корзины \nimport { deleteFromCart } from '../actions/magazineActions'\n\nimport { deleteOrDecreaseItemFromCart } from '../actions/magazineActions'\n\nimport { increaseItemInCart } from '../actions/magazineActions'\n\n\n\n\n\n\n// Карточка   конкретного,  добавленного в корзину товара \nclass CartItem extends Component {\n\n\n  render() {\n    \n    const { title, price, id, deleteFromCart, deleteOrDecreaseItemFromCart , increaseItemInCart ,choosenItemPrice  } = this.props;\n    return (\n      <div className=\"cart-item\">\n        <p className=\"cart-item__title\">{title}</p>\n        <div className=\"wrapper-for-increase-decrease\">\n          <button onClick={ ()=> increaseItemInCart(id) } className=\"increase\">+</button>\n          <button onClick={ ()=> deleteOrDecreaseItemFromCart(id) } className=\"decrease\">-</button>\n        </div>\n        <p className=\"cart-item__price\">{price}.00$</p>\n        <button onClick={ ()=> deleteFromCart(id) }>X</button>\n      </div>\n    );\n  }\n}\n\n\n\n\n// 2 )  Этот метод нужен для того, чтобы взять из store какие-то данные и передать их в качестве пропсов компоненту \n// То есть здесь мы берём весь store и отрезаем от него лишь нужный нам кусочек\nconst mapStateToProps = store => {\n  return {\n    magazine: store.magazine // store.magazine - это состояние  state, которое  мы   создавали  в редюсере page (см. папку reducers и файлы page.js и index.js)\n  }\n}\n\n\n// 2 ) этот метод нужен для того, чтобы взять экшен-креатор     deleteFromCart     и передать его  через пропсы    компоненту  CartItem\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteFromCart: id => dispatch(deleteFromCart(id)),\n    deleteOrDecreaseItemFromCart: id => dispatch(deleteOrDecreaseItemFromCart(id)),\n    increaseItemInCart: id => dispatch(increaseItemInCart(id)),\n  }\n}\n\n// Контейнер PageContainer присоединяется к store  при помощи connect, берёт оттуда нужные данные и прокидывает их КОНТЕЙНЕРУ PageContainerge через props\n//  (при помощи mapStateToPropsи mapDispatchToProps)\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CartItem)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from \"react\";\n// import \"../styles.css\";\n\n\n\n\n\n\n\n// // Карточка добавленного в корзину товара \n// class CartItem extends Component {\n//   render() {\n//     const { title, price } = this.props;\n//     return (\n//       <div className=\"cart-item\">\n//         <p className=\"cart-item__title\">{title}</p>\n//         <p className=\"cart-item__price\">{price}.00$</p>\n//         <button>X</button>\n//       </div>\n//     );\n//   }\n// }\n\n// export default CartItem;\n","import React, { Component } from \"react\";\nimport \"../styles.css\";\n\n// 0 ) Подключаем   встроенную в Redux  функцию connect, которая позволит нам присоединяться к store и   брать  оттуда нужную часть информации\nimport { connect } from 'react-redux'\n\n// 1 ) Подключаем  экшен-криейтор deleteFromCart,     удаляющий конкретный   товар из корзины \nimport { deleteAllItemsFromCart } from '../actions/magazineActions'\n\n\n\nimport CartItem from './CartItem';\n\n\n\n\n\n\n\nclass Cart extends Component {\n  // state = {\n  //   cartGoods: []\n  // }\n\n\n  getTotal() {\n    // Из пропсов получает массив\n    const { cartGoods } = this.props.magazine;\n\n    return cartGoods.reduce((acc, item) => acc + item.price, 0);\n  }\n\n\n\n  render() {\n    const { cartGoods } = this.props.magazine;\n\n    return (\n      <div className=\"cart\">\n        <h2 className=\"cart__title\" >Shopping Cart</h2>\n\n\n        { cartGoods.length > 0 ?\n\n\n          <ul className=\"cart__list\">\n\n            {cartGoods.map((item) => (\n              <li className=\"cart__list-item\" key={item.id}>\n                <CartItem {...item} />\n              </li>\n            ))}\n            \n          </ul>\n\n\n        :\n          <p className=\"cart__note\">Nothing in the cart now</p>\n        }\n        \n        <p className=\"cart__total\">Total: {this.getTotal()}.00$</p>\n\n        { cartGoods.length > 0  ? <button onClick={this.props.deleteAllItemsFromCart}  className=\"clear-button\">Clear curt</button> : null}\n\n      </div>\n    );\n  }\n}\n\n\n\n// 2 )  Этот метод нужен для того, чтобы взять из store какие-то данные и передать их в качестве пропсов компоненту \n// То есть здесь мы берём весь store и отрезаем от него лишь нужный нам кусочек\nconst mapStateToProps = store => {\n  return {\n    magazine: store.magazine // store.magazine - это состояние  state, которое  мы   создавали  в редюсере page (см. папку reducers и файлы page.js и index.js)\n  }\n}\n\n\n// ...а этот метод нужен для того, чтобы взять экшен-креатор     getPhotos     и передать его  через пропсы   КОНТЕЙНЕРУ PageContainer\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteAllItemsFromCart: () => dispatch(deleteAllItemsFromCart()),\n  }\n}\n\n\n\n\n// Контейнер PageContainer присоединяется к store  при помощи connect, берёт оттуда нужные данные и прокидывает их КОНТЕЙНЕРУ PageContainerge через props\n//  (при помощи mapStateToProps и mapDispatchToProps)\nexport default connect(\n  mapStateToProps, mapDispatchToProps\n)(Cart)\n\n// Мы указали пустую функцию вместо mapDispatchToProps, чтобы Редакс не пропихивал в пропсы компонента Cart  свою функцию\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from \"react\";\n// import \"../styles.css\";\n\n// import CartItem from './CartItem';\n\n// class Cart extends Component {\n//   state = {\n//     cartGoods: []\n//   }\n//   getTotal() {\n//     const { cartGoods } = this.state;\n//     return cartGoods.reduce((acc, item) => acc + item.price, 0);\n//   }\n//   render() {\n//     return (\n//       <div className=\"cart\">\n//         <h2 className=\"cart__title\" >Shopping Cart</h2>\n//         { this.state.cartGoods.length ?\n//           <ul className=\"cart__list\">\n//             {this.state.cartGoods.map((item) => (\n//               <li className=\"cart__list-item\" key={item.id}>\n//                 <CartItem {...item} />\n//               </li>\n//             ))}\n//           </ul>\n//         :\n//           <p className=\"cart__note\">Nothing in the cart now</p>\n//         }\n        \n//         <p className=\"cart__total\">Total: {this.getTotal()}.00$</p>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Cart;\n","import React, { Component } from \"react\";\nimport \"./styles.css\";\n\nimport Header from './components/Header';\nimport Goods from './components/Goods';\nimport Cart from './components/Cart';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app__header\">\n          <Header />\n        </header>\n        <main class=\"app__main\">\n          <div class=\"app__goods\">\n            <Goods />\n          </div>\n          <div class=\"app__cart\">\n            <Cart />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\n// Подключаю стор\nimport { store } from './store/configureStore'\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Provider store={store}> <App /> </Provider>, rootElement);\n"],"sourceRoot":""}